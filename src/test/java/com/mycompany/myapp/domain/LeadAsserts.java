package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeadAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeadAllPropertiesEquals(Lead expected, Lead actual) {
        assertLeadAutoGeneratedPropertiesEquals(expected, actual);
        assertLeadAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeadAllUpdatablePropertiesEquals(Lead expected, Lead actual) {
        assertLeadUpdatableFieldsEquals(expected, actual);
        assertLeadUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeadAutoGeneratedPropertiesEquals(Lead expected, Lead actual) {
        assertThat(expected)
            .as("Verify Lead auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeadUpdatableFieldsEquals(Lead expected, Lead actual) {
        assertThat(expected)
            .as("Verify Lead relevant properties")
            .satisfies(e -> assertThat(e.getFirst_name()).as("check first_name").isEqualTo(actual.getFirst_name()))
            .satisfies(e -> assertThat(e.getLast_name()).as("check last_name").isEqualTo(actual.getLast_name()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFax()).as("check fax").isEqualTo(actual.getFax()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()))
            .satisfies(e -> assertThat(e.getIndustry()).as("check industry").isEqualTo(actual.getIndustry()))
            .satisfies(e -> assertThat(e.getNo_of_employees()).as("check no_of_employees").isEqualTo(actual.getNo_of_employees()))
            .satisfies(e -> assertThat(e.getAnnual_Revenue()).as("check annual_Revenue").isEqualTo(actual.getAnnual_Revenue()))
            .satisfies(e -> assertThat(e.getStreet()).as("check street").isEqualTo(actual.getStreet()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getZip_code()).as("check zip_code").isEqualTo(actual.getZip_code()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeadUpdatableRelationshipsEquals(Lead expected, Lead actual) {}
}
